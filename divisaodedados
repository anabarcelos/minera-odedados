import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Gerar dados: Y = Ax + erro
np.random.seed(0)
n_samples = 100
X = np.random.uniform(-3, 3, n_samples).reshape(-1, 1)
A = 2.5
Y = A * X.flatten() + np.random.normal(0, 2, n_samples)

# Dividir os dados
X_train, X_rest, Y_train, Y_rest = train_test_split(X, Y, test_size=0.4, random_state=0)
X_val, X_test, Y_val, Y_test = train_test_split(X_rest, Y_rest, test_size=0.5, random_state=0)

degrees = [1, 3, 6]

# Parte 1: Ajuste e erro
for d in degrees:
    poly = PolynomialFeatures(degree=d)
    X_train_poly = poly.fit_transform(X_train)
    X_test_poly = poly.transform(X_test)
    model = LinearRegression()
    model.fit(X_train_poly, Y_train)

    Y_train_pred = model.predict(X_train_poly)
    Y_test_pred = model.predict(X_test_poly)

    mse_train = mean_squared_error(Y_train, Y_train_pred)
    mse_test = mean_squared_error(Y_test, Y_test_pred)

    print(f"Grau {d}: MSE Treino = {mse_train:.2f} | MSE Teste = {mse_test:.2f}")

    # Plot
    plt.figure()
    plt.scatter(X_train, Y_train, color='blue', label="Treino")
    plt.scatter(X_test, Y_test, color='black', label="Teste")

    X_plot = np.linspace(-3, 3, 100).reshape(-1, 1)
    X_plot_poly = poly.transform(X_plot)
    Y_plot = model.predict(X_plot_poly)

    plt.plot(X_plot, Y_plot, color='red', label=f"Ajuste Grau {d}")
    plt.xlabel("X")
    plt.ylabel("Y")
    plt.title(f"Polin√¥mio de Grau {d}")
    plt.legend()

    # üîΩ Salvar a figura
    plt.savefig(f"grafico_grau_{d}.png", dpi=300)

    # Mostrar a figura
    plt.show()

# Parte 2: Valida√ß√£o
val_errors = []
for d in degrees:
    poly = PolynomialFeatures(degree=d)
    X_train_poly = poly.fit_transform(X_train)
    X_val_poly = poly.transform(X_val)
    model = LinearRegression()
    model.fit(X_train_poly, Y_train)
    Y_val_pred = model.predict(X_val_poly)
    mse = mean_squared_error(Y_val, Y_val_pred)
    val_errors.append(mse)
    print(f"Valida√ß√£o - Grau {d}: MSE = {mse:.2f}")

best_degree = degrees[np.argmin(val_errors)]
print(f"\nMelhor grau escolhido com base na valida√ß√£o: {best_degree}")

##MUDAN√áAS FEITAS :
## MUDEI A SEED PARA 0
## MUDEI O GRAU DOS POLINOMIOS
## MUDEI A PROPORCAO DE TREINO E TESTE PARA 60%/40%, ASSIM TENDO MAIS DADOS PARA O MODELO 'APRENDER' COMO FUNCIONAR
## PODENDO MELHORAFR O DESEMPENHO POREM SEI QUE MENOS DADOS PARA O TESTE PODE TORNAR MENOS PRECISO
