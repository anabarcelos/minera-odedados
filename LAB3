import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.datasets import load_diabetes
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.feature_selection import SequentialFeatureSelector
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error


data = load_diabetes()
X = pd.DataFrame(data.data, columns=data.feature_names)
y = pd.Series(data.target, name='target')


X_train, X_temp, y_train, y_temp = train_test_split(
    X, y, test_size=0.4, random_state=42
)
X_val, X_test, y_val, y_test = train_test_split(
    X_temp, y_temp, test_size=0.5, random_state=42
)

resultados = []


for k in range(1, X.shape[1]):

    pipe = Pipeline([
        ('selecao', SequentialFeatureSelector(
            estimator=LinearRegression(),
            n_features_to_select=k,
            direction='forward',
            cv=3,
            n_jobs=-1
        )),
        ('regressor', LinearRegression())
    ])

    pipe.fit(X_train, y_train)

    y_pred = pipe.predict(X_val)

    mse = mean_squared_error(y_val, y_pred)

    mascara_selecionadas = pipe.named_steps['selecao'].get_support()
    variaveis_selecionadas = X.columns[mascara_selecionadas].tolist()

    resultados.append({
        'num_variaveis': k,
        'mse_validacao': mse,
        'variaveis': variaveis_selecionadas
    })

df_resultados = pd.DataFrame(resultados)

print(df_resultados)


plt.figure(figsize=(10, 6))
plt.plot(df_resultados['num_variaveis'], df_resultados['mse_validacao'], marker='o')
plt.xlabel('Número de Variáveis Selecionadas')
plt.ylabel('MSE na Validação')
plt.title('Erro Quadrático Médio vs Número de Variáveis')
plt.grid(True)
plt.show()
