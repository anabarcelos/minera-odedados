# 1. Importar bibliotecas necessárias
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, roc_curve, auc

# 2. Fazendo upload do arquivo Excel
from google.colab import files
uploaded = files.upload()

# 3. Carregando o arquivo do computador
df = pd.read_csv("dataset.csv")

# 4. Separando as variáveis explicativas
X = df.iloc[:, :-1]  # puxando x1 até x10
y = df.iloc[:, -1]   # puxando a coluna y

# 5. Dividindo em treino e teste
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# 6. Treinando o modelo de regressão logística
modelo = LogisticRegression(max_iter=1000)
modelo.fit(X_train, y_train)

# 7. Realizando previsões de probabilidade e classificação com threshold 0.5
y_proba = modelo.predict_proba(X_test)[:, 1]
y_pred = (y_proba >= 0.5).astype(int)

# 8. Construindo a matriz de confusão
matriz = confusion_matrix(y_test, y_pred)
print("Matriz de Confusão:")
print(matriz)

# 9. Calculando as métricas a partir da matriz
VP = matriz[1, 1]
VN = matriz[0, 0]
FP = matriz[0, 1]
FN = matriz[1, 0]

acuracia = (VP + VN) / np.sum(matriz)
precisao = VP / (VP + FP) if (VP + FP) > 0 else 0
recall = VP / (VP + FN) if (VP + FN) > 0 else 0
f1 = 2 * (precisao * recall) / (precisao + recall) if (precisao + recall) > 0 else 0

print(f"Acurácia: {acuracia:.3f}")
print(f"Precisão: {precisao:.3f}")
print(f"Recall: {recall:.3f}")
print(f"F1-score: {f1:.3f}")

# 10. Plotando a curva ROC e calculando AUC
fpr, tpr, thresholds_roc = roc_curve(y_test, y_proba)
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(6, 6))
plt.plot(fpr, tpr, label=f"AUC = {roc_auc:.3f}")
plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel("FPR (Falsos Positivos)")
plt.ylabel("TPR (Revocação)")
plt.title("Curva ROC")
plt.legend(loc="lower right")
plt.grid(True)
plt.tight_layout()
plt.show()

# 11. DESAFIO: Encontrar o melhor threshold com base no F1-score
# ==========================
# a) Criar a lista de thresholds entre 0 e 1
# ==========================
thresholds = np.linspace(0, 1, 100)

# ==========================
# b, c, d) Para cada threshold, calcular:
#         - previsões binárias
#         - matriz de confusão
#         - precisão, recall, F1-score
#         - guardar o F1-score
# ==========================
f1_scores = []
melhor_threshold = 0
melhor_f1 = 0

for t in thresholds:
    # b) Previsões binárias com o threshold t
    y_pred_t = (y_proba >= t).astype(int)

    # b) Matriz de confusão
    cm = confusion_matrix(y_test, y_pred_t)

    # c) Cálculo manual das métricas
    VP = cm[1, 1]
    VN = cm[0, 0]
    FP = cm[0, 1]
    FN = cm[1, 0]

    precisao = VP / (VP + FP) if (VP + FP) > 0 else 0
    recall = VP / (VP + FN) if (VP + FN) > 0 else 0
    f1 = 2 * (precisao * recall) / (precisao + recall) if (precisao + recall) > 0 else 0

    # d) Guardar F1-score
    f1_scores.append(f1)

    # Verificar se é o melhor F1 até agora
    if f1 > melhor_f1:
        melhor_f1 = f1
        melhor_threshold = t

# ==========================
# e) Plotar o gráfico do F1-score em função do threshold
# ==========================
plt.figure(figsize=(8, 5))
plt.plot(thresholds, f1_scores, color='purple')
plt.xlabel("Threshold")
plt.ylabel("F1-score")
plt.title("e) F1-score em função do Threshold")
plt.grid(True)
plt.show()

# ==========================
# f) Mostrar o melhor threshold e refazer a matriz de confusão
# ==========================
print(f"f) Melhor threshold encontrado: {melhor_threshold:.3f}")
print(f"f) Melhor F1-score obtido: {melhor_f1:.3f}")

# Previsões com melhor threshold
y_pred_melhor = (y_proba >= melhor_threshold).astype(int)

# Nova matriz de confusão com o melhor threshold
matriz_melhor = confusion_matrix(y_test, y_pred_melhor)
print("f) Matriz de Confusão com o Melhor Threshold:")
print(matriz_melhor)

